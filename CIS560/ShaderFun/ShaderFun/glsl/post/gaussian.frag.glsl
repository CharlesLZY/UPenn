#version 150

in vec2 fs_UV;

out vec3 color;

uniform sampler2D u_RenderedTexture;
uniform int u_Time;
uniform ivec2 u_Dimensions;


// Gaussian kernel: kernel_size = 11 and gamma = 9
const float GaussianKernel[121] = float[121](
    0.006849, 0.007239, 0.007559, 0.007795, 0.007941, 0.007990, 0.007941, 0.007795, 0.007559, 0.007239, 0.006849,
    0.007239, 0.007653, 0.007990, 0.008240, 0.008394, 0.008446, 0.008394, 0.008240, 0.007990, 0.007653, 0.007239,
    0.007559, 0.007990, 0.008342, 0.008604, 0.008764, 0.008819, 0.008764, 0.008604, 0.008342, 0.007990, 0.007559,
    0.007795, 0.008240, 0.008604, 0.008873, 0.009039, 0.009095, 0.009039, 0.008873, 0.008604, 0.008240, 0.007795,
    0.007941, 0.008394, 0.008764, 0.009039, 0.009208, 0.009265, 0.009208, 0.009039, 0.008764, 0.008394, 0.007941,
    0.007990, 0.008446, 0.008819, 0.009095, 0.009265, 0.009322, 0.009265, 0.009095, 0.008819, 0.008446, 0.007990,
    0.007941, 0.008394, 0.008764, 0.009039, 0.009208, 0.009265, 0.009208, 0.009039, 0.008764, 0.008394, 0.007941,
    0.007795, 0.008240, 0.008604, 0.008873, 0.009039, 0.009095, 0.009039, 0.008873, 0.008604, 0.008240, 0.007795,
    0.007559, 0.007990, 0.008342, 0.008604, 0.008764, 0.008819, 0.008764, 0.008604, 0.008342, 0.007990, 0.007559,
    0.007239, 0.007653, 0.007990, 0.008240, 0.008394, 0.008446, 0.008394, 0.008240, 0.007990, 0.007653, 0.007239,
    0.006849, 0.007239, 0.007559, 0.007795, 0.007941, 0.007990, 0.007941, 0.007795, 0.007559, 0.007239, 0.006849
);


void main()
{
    color = vec3(0); // initialize
    for (int i = -5; i <= 5; i++) {
        for (int j = -5; j <= 5; j++) {
            vec2 delta = vec2(float(i) / u_Dimensions.x, float(j) / u_Dimensions.y);
            vec3 Color = texture(u_RenderedTexture, fs_UV + delta).rgb;
            color += GaussianKernel[(j + 5) + (i + 5) * 11] * Color;
        }
    }
}
